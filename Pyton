from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import serialization, hashes

class Wallet:
    def __init__(self, private_key=None):
        if private_key is None:
            self.private_key = rsa.generate_private_key(
                public_exponent=65537,
                key_size=2048
            )
        else:
            self.private_key = serialization.load_pem_private_key(
                private_key.encode('utf-8'),
                password=None
            )

        self.public_key = self.private_key.public_key()
        self.address = self.get_address()

    def get_address(self):
        public_key_bytes = self.public_key.public_bytes(
            encoding=serialization.Encoding.DER,
            format=serialization.PublicFormat.SubjectPublicKeyInfo
        )
        return hashes.Hash(hashes.SHA256(), backend=default_backend()).update(public_key_bytes).finalize().hex()

    def sign_transaction(self, transaction):
        signature = self.private_key.sign(
            transaction.to_dict().encode('utf-8'),
            padding.PKCS1v15(),
            hashes.SHA256()
        )
        return signature.hex()

    def verify_transaction(self, transaction):
        public_key = serialization.load_der_public_key(
            bytes.fromhex(transaction.sender_public_key),
            backend=default_backend()
        )
        signature = bytes.fromhex(transaction.signature)
        try:
            public_key.verify(
                signature,
                transaction.to_dict().encode('utf-8'),
                padding.PKCS1v15(),
                hashes.SHA256()
            )
            return True
        except:
            return False
